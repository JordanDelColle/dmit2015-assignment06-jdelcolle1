package dmit2015.jdelcolle1.assignment06.entity;
import jakarta.persistence.*;
import jakarta.validation.constraints.*;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

import java.io.Serializable;
import java.math.BigDecimal;
import java.time.LocalDate;
import java.time.LocalDateTime;

/**
 * The persistent class for the bills database table.
 *
 * Example taken from https://docs.microsoft.com/en-us/aspnet/core/tutorials/razor-pages/validation?view=aspnetcore-6.0&tabs=visual-studio#validation-1
 */
@Getter
@Setter
@NoArgsConstructor
@Entity                     // This class is map to database table with the same name as the class name
@Table(name = "bills")     // This entity class maps to a database table named bills
public class Bill implements Serializable {

    @Id                 // This is the primary key field
    @GeneratedValue(strategy = GenerationType.IDENTITY)     // This primary key field is generated by the database
    private Long id;

    @Column(length = 100, nullable = false)
    @NotBlank(message = "The Title field is required.")
    @Size(min = 1, max = 100, message = "The field Title must be a string with a minimum length of {min} and a maximum length of {max}.")
    private String payeeName;

    @Column(nullable = false)
    @NotNull(message = "The Release Date field is required")
    private LocalDate dueDate;

    @DecimalMin(value = "0.01",message = "The price must be a number between 0.01 and 100000.00.")
    @DecimalMax(value = "100000.00",message = "The price must be a number between 0.01 and 100000.00.")
    private BigDecimal paymentDue;

    @DecimalMin(value = "0.01",message = "The price must be a number between 0.01 and 100000.00.")
    @DecimalMax(value = "100000.00",message = "The price must be a number between 0.01 and 100000.00.")
    private BigDecimal paymentBalance;

    @Version
    private Integer version;

    @Column(nullable = false)
    private LocalDateTime createdDateTime;

    @Column(nullable = false)
    private LocalDateTime lastModifiedDateTime;

    @PrePersist
    private void beforePersist() {
        createdDateTime = LocalDateTime.now();
        lastModifiedDateTime = createdDateTime;
    }

    @PreUpdate
    private void beforeUpdate() {
        lastModifiedDateTime = LocalDateTime.now();
    }

}